:PROPERTIES:
:ID:       A79F5CC6-2E10-47CC-86A3-7C4CE73B015C
:ROAM_ALIASES: ox-extend
:END:
#+title: ox-extend: Structured extensions for ox.el
#+author: Jeff Kreeftmeijer
#+date: 2023-03-05

#+begin_src emacs-lisp :tangle ox-extend.el :exports none
  ;;; ox-extend.el --- Structured extensions for ox.el

  ;;; Commentary:

  ;; ox-extend.el adds :extensions to org-publish-project-alist.
  ;;
  ;; Each extension registers itself in ox-extend-extensions-alist
  ;; with a function to add and remove it. In
  ;; org-publish-project-alist, the :extensions key holds a list of
  ;; enabled extensions for that specific publishing project.
  ;;
  ;; The enabled extensions are added before org-publish-file, and
  ;; removed immediately after.

  ;;; Code:
#+end_src

The =ox-extend= package requires =ox-publish.el= to advise =org-publish-file= and use the =org-publish-property=:

#+headers: :tangle ox-extend.el
#+begin_src emacs-lisp
  (require 'ox-publish)
#+end_src

The =ox-extend-extensions-alist= is an association list for registered extensions:
Each extension must register itseld in this list when it's loaded to be available for use in publishing projects.

#+headers: :tangle ox-extend.el
#+begin_src emacs-lisp
  (setq ox-extend-extensions-alist '())
#+end_src

Each element consists of  a symbol that identifies the extension and a list with an =:add= function to add the extension's advise and a =:remove= function to remove it.

#+caption: An example of an extension to be added to =ox-extend-extensions-alist=:
#+begin_src emacs-lisp
  '('ox-html-git-mtime
    :add (lambda () (advice-add 'org-html-title :around #'ox-html-upcase-title))
    :remove (lambda () (advice-remove 'org-html-title #'ox-html-upcase-title))
#+end_src

To extend the functionality of the =org-publish-file= function, =ox-extend--advise= provides advise to add and remove the registered extensions.
It finds the =:add= and =:remove= functions for all extensions added to the project's =:extensions= list in the =ox-extend-extensions-alist=.

For each extenson, the =:add= function is executed before =org-publish-file=, and =:remove= is called immediately after.
This adds the extensions when they're needed, and removes them to prevent them from interfering with future publishing:

#+headers: :tangle ox-extend.el
#+begin_src emacs-lisp
  (defun ox-extend--advise (orig-fun &rest args)
    "Advise org-publish-file (ORIG-FUN) to add and remove each extension contained in ARGS."
    (let ((extensions (org-publish-property :extensions (nth 1 args))))
      (dolist (extension extensions)
        (ox-extend--apply extension :add))
      (apply orig-fun args)
      (dolist (extension extensions)
        (ox-extend--apply extension :remove))))

  (defun ox-extend--apply (extension add_or_remove)
    "Call the ADD_OR_REMOVE function for an EXTENSION."
    (apply (plist-get (cdr (assoc extension ox-extend-extensions-alist))
		      add_or_remove)
	   ()))

#+end_src

The =ox-extend-add= and =ox-extend-remove= add and remove the main advise, enabling and disabling all extensions completely.
When loading =ox-extend.el=, call =ox-extend-add= to add the advise.
The =ox-extend-remove= function exists for convenience and shouldn't have to be used regularly, if ever.

#+headers: :tangle ox-extend.el
#+begin_src emacs-lisp
  ;;;###autoload
  (defun ox-extend-add ()
      (advice-add 'org-publish-file :around #'ox-extend--advise))

  (defun ox-extend-remove ()
      (advice-remove 'org-publish-file #'ox-extend--advise))
#+end_src

Finally, use the =provide= fucntion to announce =ox-extend.el=:

#+headers: :tangle ox-extend.el
#+begin_src emacs-lisp
  (provide 'ox-extend)
#+end_src

#+begin_src emacs-lisp :tangle ox-extend.el :exports none
  ;;; ox-extend.el ends here
#+end_src

* Example
:PROPERTIES:
:CUSTOM_ID: example
:END:

The /hello world/ example adds advise to print "hello, world!" before ~org-publish-file~ is called, and "goodbye, world!" after.

Start by loading =ox-extend.el= by adding its directory to the ~load-path~ and calling ~require~:

#+name: require
#+begin_src emacs-lisp
  (add-to-list 'load-path ".")
  (require 'ox-extend)
#+end_src

With =ox-extend.el= loaded, add the extension to ~ox-extend-extensions-alist~ by passing an association list with an ~:add~ and a ~:remove~ key.
Instead of actually altering the publishing behavior, both functions print a message to the =*Messages*= buffer:

#+name: add-to-list
#+begin_src emacs-lisp
  (add-to-list
   'ox-extend-extensions-alist '('hello-world :add (lambda () (message "hello, world!"))
                                              :remove (lambda () (message "goodbye, world!"))))
#+end_src

To try the extension, enable the library by calling ~ox-extend-add~.
Then, call ~org-publish-file~ with a project that lists ~'hello-world~ as one of its ~:extensions~:

#+name: add
#+headers: :exports none
#+begin_src emacs-lisp
  (ox-extend-add)
#+end_src

#+name: publish-file
#+headers: :exports none
#+begin_src emacs-lisp
(org-publish-file "ox-extend.org"
                  '("ox-extend-example"
                    :base-directory "."
                    :publishing-directory "dist"
                    :extensions ('hello-world)))
#+end_src

#+headers: :noweb yes
#+begin_src emacs-lisp
  <<add>>

  <<publish-file>>
#+end_src

The =*Messages*= buffer prints both messages:

#+begin_example
hello, world!
Publishing file ox-extend.org using ‘org-html-publish-to-html’
goodbye, world!
#+end_example

#+name: teardown
#+headers: :exports none
#+begin_src emacs-lisp
  (delete-directory "dist" t)
#+end_src

#+headers: :exports none
#+headers: :tangle test.el
#+headers: :noweb yes
#+begin_src emacs-lisp
  (require 'ert)
  <<require>>

  <<add-to-list>>

  (ert-deftest hello-world-test ()
    <<add>>

    <<publish-file>>

    (let ((output (with-current-buffer "*Messages*" (buffer-string))))
      (let ((lines (split-string output "\n")))

        (should (string-match-p "hello, world!" output))
        (should (string-match-p "ox-extend.org" output))
        (should (string-match-p "goodbye, world!" output))))

    <<teardown>>)
#+end_src

* Writing extensions
:PROPERTIES:
:CUSTOM_ID: writing-extensions
:END:

As an example, we're writing an extension named =ox-md-title=, which adds document titles to markdown files generated with =ox-md=.

Writing an extension involves advising one or more functions and registering the extension to be available to publishing projects.
This extension will advise [[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/tree/lisp/ox-md.el#n721][src_emacs-lisp[:exports code]{org-md-template}]], which currently only returns the generated document contents:

#+begin_src emacs-lisp
  (defun org-md-template (contents _info)
    contents)
#+end_src

Our aim is to prepend the document's title with the correct markup.

First, require ~ox-extend~.
Unlike the example above, actual extensions don't alter the load path:

#+headers: :tangle ox-md-title.el
#+begin_src emacs-lisp
  (require 'ox-extend)
#+end_src

Then, write an ~:around~ [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html][advice]] for src_emacs-lisp[:exports code]{org-md-template}, which gets the original funcion and arguments.
In the function body, we call out to src_emacs-lisp[:exports code]{org-md--headline-title} to generate the title with arguments we find from the second argument in src_emacs-lisp[:exports code]{args}:

#+headers: :tangle ox-md-title.el
#+begin_src emacs-lisp
  (defun ox-md-title--advise-template (orig-fun &rest args)
    (let ((info (nth 1 args)))
      (let ((style (plist-get info :md-headline-style))
            (title (org-export-data (plist-get info :title) info)))
        (concat
         (org-md--headline-title (plist-get info :md-headline-style) 1 (org-export-data (plist-get info :title) info) nil)
         (apply orig-fun args)))))
#+end_src

To enable the extension, add src_emacs-lisp[:exports code]{ox-md-title-add} and src_emacs-lisp[:exports code]{ox-md-title-remove} and add them to the src_emacs-lisp[:exports code]{ox-extend-extensions-alist}.
We're also setting the src_emacs-lisp[:exports code]{org-md-toplevel-hlevel} to =2=, as the extension adds an extra headline to the root of the page:

#+headers: :tangle ox-md-title.el
#+begin_src emacs-lisp
  (defun ox-md-title-add ()
    (setq org-md-toplevel-hlevel 2)
    (advice-add 'org-md-template :around #'ox-md-title--advise-template))

  (defun ox-md-title-remove ()
    (setq org-md-toplevel-hlevel 1)
    (advice-remove 'org-md-template #'ox-md-title--advise-template))

  (add-to-list
   'ox-extend-extensions-alist '('ox-md-title :add ox-md-title-add
                                              :remove ox-md-title-remove))
#+end_src

Finally, =provide= the =ox-md-title.el= package:

#+headers: :tangle ox-md-title.el
#+begin_src emacs-lisp
  (provide 'ox-md-title)
#+end_src

And use the extension when publishing[fn:gfm]:

#+begin_src emacs-lisp
  (add-to-list 'load-path ".")
  (require 'ox-md-title)

  (ox-extend-add)

  (org-publish-file "ox-extend.org"
		    '("ox-extend-markdown"
		      :base-directory "."
		      :publishing-directory "."
		      :publishing-function org-gfm-publish-to-gfm
		      :extensions ('ox-md-title)))
#+end_src

[fn:gfm]: This publishing project uses [[https://github.com/larstvei/ox-gfm][=ox-gf=]] instead of Org's =ox-md=.
That works because ox-gfm is a derived backend which also uses =org-md-template= as its template function.


The exporter now prepends the document title in the Markdown export:

#+headers: :results scalar
#+headers: :exports both
#+begin_src shell
  head ox-extend.md
#+end_src

#+RESULTS:
#+begin_example

# ox-extend: Structured extensions for ox.el

- [Example](#example)
- [Writing extensions](#writing-extensions)

The `ox-extend` package requires `ox-publish.el` to advise `org-publish-file` and use the `org-publish-property`:

```emacs-lisp
(require 'ox-publish)
#+end_example
