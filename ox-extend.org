:PROPERTIES:
:ID:       A79F5CC6-2E10-47CC-86A3-7C4CE73B015C
:ROAM_ALIASES: ox-extend
:END:
#+title: ox-extend: Structured extensions for ox.el
#+author: Jeff Kreeftmeijer
#+date: 2023-03-05

#+begin_src emacs-lisp :tangle ox-extend.el :exports none
  ;;; ox-extend.el --- Structured extensions for ox.el

  ;;; Commentary:

  ;; ox-extend.el adds :extensions to org-publish-project-alist.
  ;;
  ;; Each extension registers itself in ox-extend-extensions-alist
  ;; with a function to add and remove it. In
  ;; org-publish-project-alist, the :extensions key holds a list of
  ;; enabled extensions for that specific publishing project.
  ;;
  ;; The enabled extensions are added before org-publish-file, and
  ;; removed immediately after.

  ;;; Code:
#+end_src

The =ox-extend-extensions-alist= is an association list for registered extensions:
Each extension must register itseld in this list when it's loaded to be available for use in publishing projects.

#+headers: :tangle ox-extend.el
#+begin_src emacs-lisp
  (setq ox-extend-extensions-alist '())
#+end_src

Each element consists of  a symbol that identifies the extension and a list with an =:add= function to add the extension's advise and a =:remove= function to remove it.

#+caption: An example of an extension to be added to =ox-extend-extensions-alist=:
#+begin_src emacs-lisp
  '('ox-html-git-mtime
    :add (lambda () (advice-add 'org-html-title :around #'ox-html-upcase-title))
    :remove (lambda () (advice-remove 'org-html-title #'ox-html-upcase-title))
#+end_src

To extend the functionality of the =org-publish-file= function, =ox-extend--advise= provides advise to add and remove the registered extensions.
It finds the =:add= and =:remove= functions for all extensions added to the project's =:extensions= list in the =ox-extend-extensions-alist=.

For each extenson, the =:add= function is executed before =org-publish-file=, and =:remove= is called immediately after.
This adds the extensions when they're needed, and removes them to prevent them from interfering with future publishing:

#+headers: :tangle ox-extend.el
#+begin_src emacs-lisp
  (defun ox-extend--advise (orig-fun &rest args)
    "Advise org-publish-file (ORIG-FUN) to add and remove each extension contained in ARGS."
    (let ((extensions (org-publish-property :extensions (nth 1 args))))
      (dolist (extension extensions)
        (ox-extend--apply extension :add))
      (apply orig-fun args)
      (dolist (extension extensions)
        (ox-extend--apply extension :remove))))

  (defun ox-extend--apply (extension add_or_remove)
    "Call the ADD_OR_REMOVE function for an EXTENSION."
    (apply (plist-get (cdr (assoc extension ox-extend-extensions-alist))
		      add_or_remove)
	   ()))

#+end_src

The =ox-extend-add= and =ox-extend-remove= add and remove the main advise, enabling and disabling all extensions completely.
When loading =ox-extend.el=, call =ox-extend-add= to add the advise.
The =ox-extend-remove= function exists for convenience and shouldn't have to be used regularly, if ever.

#+headers: :tangle ox-extend.el
#+begin_src emacs-lisp
  ;;;###autoload
  (defun ox-extend-add ()
      (advice-add 'org-publish-file :around #'ox-extend--advise))

  (defun ox-extend-remove ()
      (advice-remove 'org-publish-file #'ox-extend--advise))
#+end_src

Finally, use the =provide= fucntion to announce =ox-extend.el=:

#+headers: :tangle ox-extend.el
#+begin_src emacs-lisp
  (provide 'ox-extend)
#+end_src

#+begin_src emacs-lisp :tangle ox-extend.el :exports none
  ;;; ox-extend.el ends here
#+end_src
