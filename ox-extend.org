:PROPERTIES:
:ID:       A79F5CC6-2E10-47CC-86A3-7C4CE73B015C
:ROAM_ALIASES: ox-extend
:END:
#+title: ox-extend: Structured extensions for ox.el
#+author: Jeff Kreeftmeijer
#+date: 2023-03-05

#+begin_src emacs-lisp :tangle ox-extend.el :exports none
  ;;; ox-extend.el --- Structured extensions for ox.el

  ;;; Commentary:

  ;; ox-extend.el adds :extensions to org-publish-project-alist.
  ;;
  ;; Each extension registers itself in ox-extensions-alist with a
  ;; function to add and remove it. In org-publish-project-alist, the
  ;; :extensions key holds a list of enabled extensions for that
  ;; specific publishing project.
  ;;
  ;; The enabled extensions are added before org-publish-file, and
  ;; removed immediately after.

  ;;; Code:
#+end_src

#+headers: :tangle ox-extend.el
#+begin_src emacs-lisp
  (setq ox-extensions-alist '())

  (defun ox-extend--apply (extension add_or_remove)
    "Call the ADD_OR_REMOVE function for an EXTENSION."
    (apply (plist-get (cdr (assoc extension ox-extend-extensions-alist))
		      add_or_remove)
	   ()))

  (defun ox-extend--advise-org-publish-file (orig-fun &rest args)
    "Advise org-publish-file (ORIG-FUN) to add and remove each extension contained in ARGS."
    (let ((extensions (org-publish-property :extensions (nth 1 args))))
      (dolist (extension extensions)
        (ox-extend--apply extension :add))
      (apply orig-fun args)
      (dolist (extension extensions)
        (ox-extend--apply extension :remove))))

  (advice-add 'org-publish-file :around #'ox-extend--advise-org-publish-file)

  (provide 'ox-extend)
#+end_src

#+begin_src emacs-lisp :tangle ox-extend.el :exports none
  ;;; ox-extend.el ends here
#+end_src

* :noexport:
** DONE Print message based on :extensions option in =org-publish-project-alist=

#+headers: :dir /tmp/ox-extend
#+headers: :mkdirp yes
#+headers: :prologue (write-file "/tmp/ox-extend/file.org")
#+headers: :eval nil
#+begin_src emacs-lisp
  (setq org-publish-project-alist '((
				     "test"
				     :base-directory "/tmp/ox-extend"
				     :publishing-function org-html-publish-to-html
				     :publishing-directory "/tmp/ox-extend/dist")))

				     (org-publish-project "test")
#+end_src

#+RESULTS:

- =org-publish-project=
- =org-publish=
- =org-publish-projects=
- =org-publish-file=

#+begin_src emacs-lisp
  (defun ox-extend--advise-org-publish-file (orig-fun &rest args)
    (let ((extensions (org-publish-property :extensions (nth 1 args))))
      (message "ENABLE EXTENSIONS")
      (dolist (extension extensions) (message extension))
      (apply orig-fun args)
      (message "DISABLE EXTENSIONS")
      (dolist (extension extensions) (message extension))))

  (advice-add 'org-publish-file :around #'ox-extend--advise-org-publish-file)

  (setq org-publish-project-alist '((
				     "test"
				     :base-directory "/tmp/ox-extend"
				     :publishing-function org-html-publish-to-html
				     :publishing-directory "/tmp/ox-extend/dist"
				     :extensions ("foo"))))

  (org-publish-project "test")
#+end_src

#+RESULTS:

** DONE Figure out API for extensions

Include [[id:E3C80822-0C30-42EC-9D9E-CD36B35A3D96][ox-html-git-mtime]]:

#+begin_src emacs-lisp
  (defun ox-html-git-mtime--add ()
    (message "ADD ox-html-git-mtime"))

  (defun ox-html-git-mtime--remove ()
    (message "REMOVE ox-html-git-mtime"))

  (defun ox-extend--advise-org-publish-file (orig-fun &rest args)
    (let ((extensions (org-publish-property :extensions (nth 1 args))))
      (dolist (extension extensions)
	(apply (intern (concat extension "--add")) ()))
      (apply orig-fun args)
      (dolist (extension extensions)
	(apply (intern (concat extension "--remove")) ()))))

  (advice-add 'org-publish-file :around #'ox-extend--advise-org-publish-file)

  (setq org-publish-project-alist '((
				     "test"
				     :base-directory "/tmp/ox-extend"
				     :publishing-function org-html-publish-to-html
				     :publishing-directory "/tmp/ox-extend/dist"
				     :extensions ("ox-html-git-mtime"))))

  (org-publish-project "test")
#+end_src

#+RESULTS:

** DONE Add ext to list

#+begin_src emacs-lisp
  (setq ox-extensions-alist '((
			       'ox-html-git-mtime
			       :add ox-html-git-mtime--add
			       :remove ox-html-git-mtime--remove
			       )))

  (defun ox-html-git-mtime--add ()
    (message "ADD ox-html-git-mtime"))

  (defun ox-html-git-mtime--remove ()
    (message "REMOVE ox-html-git-mtime"))

  (defun ox-extend--advise-org-publish-file (orig-fun &rest args)
    (let ((extensions (org-publish-property :extensions (nth 1 args))))
      (dolist (extension extensions)
	(message "ADD")
	(apply (plist-get (cdr (assoc extension ox-extensions-alist)) :add) ())
	(message "/ADD"))
      (apply orig-fun args)
      (dolist (extension extensions)
	(message "REMOVE")
	(apply (plist-get (cdr (assoc extension ox-extensions-alist)) :remove) ())
	(message "/REMOVE"))
	)))
					  ;(apply (intern (concat extension "--remove")) ()))))

  (advice-add 'org-publish-file :around #'ox-extend--advise-org-publish-file)

  (setq org-publish-project-alist '((
				     "test"
				     :base-directory "/tmp/ox-extend"
				     :publishing-function org-html-publish-to-html
				     :publishing-directory "/tmp/ox-extend/dist"
				     :extensions ('ox-html-git-mtime))))

  (org-publish-project "test")
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (setq  list '((foo (:add ox-html-git-mtime--add))))

  (cdr (assoc :add (cdr (assoc 'foo list))))
#+end_src 

#+begin_src emacs-lisp
  (setq ox-extensions-alist '((
			       ox-html-git-mtime
				:add ox-html-git-mtime--add
				:remove ox-html-git-mtime--remove
  )))

  (listp ox-extensions-alist)

  ;(debug (cdr (assoc 'ox-html-git-mtime ox-extensions-alist)))
  ;(debug (plist-get (cdr (assoc 'ox-html-git-mtime ox-extensions-alist)) :add))
  (apply (plist-get (cdr (assoc 'ox-html-git-mtime ox-extensions-alist)) :add) ())
#+end_src 

#+RESULTS:
: ADD ox-html-git-mtime

** DONE use lambdas or advise function refs

#+begin_src emacs-lisp
  (setq ox-extensions-alist '(('ox-html-git-mtime
			       :add (lambda () (message "Add ox-html-git-mtime"))
			       :remove (lambda () (message "Remove ox-html-git-mtime")))))

  (defun ox-extend--advise-org-publish-file (orig-fun &rest args)
    (let ((extensions (org-publish-property :extensions (nth 1 args))))
      (dolist (extension extensions)
	(apply (plist-get (cdr (assoc extension ox-extensions-alist)) :add) ())
      (apply orig-fun args)
      (dolist (extension extensions)
	(apply (plist-get (cdr (assoc extension ox-extensions-alist)) :remove) ()))))

  (advice-add 'org-publish-file :around #'ox-extend--advise-org-publish-file)

  (setq org-publish-project-alist '((
				     "test"
				     :base-directory "/tmp/ox-extend"
				     :publishing-function org-html-publish-to-html
				     :publishing-directory "/tmp/ox-extend/dist"
				     :extensions ('ox-html-git-mtime))))

  (org-publish-project "test")
#+end_src

** DONE Add to extensions list

#+begin_src emacs-lisp
  (setq ox-extensions-alist '())

  (defun ox-extend--advise-org-publish-file (orig-fun &rest args)
    (let ((extensions (org-publish-property :extensions (nth 1 args))))
      (dolist (extension extensions)
	(apply (plist-get (cdr (assoc extension ox-extensions-alist)) :add) ())
	(apply orig-fun args)
	(dolist (extension extensions)
	  (apply (plist-get (cdr (assoc extension ox-extensions-alist)) :remove) ())))))

  (advice-add 'org-publish-file :around #'ox-extend--advise-org-publish-file)

  (add-to-list 'ox-extensions-alist '('ox-html-git-mtime
				      :add (lambda () (message "Add ox-html-git-mtime"))
				      :remove (lambda () (message "Remove ox-html-git-mtime"))))

  (setq org-publish-project-alist '((
				     "test"
				     :base-directory "/tmp/ox-extend"
				     :publishing-function org-html-publish-to-html
				     :publishing-directory "/tmp/ox-extend/dist"
				     :extensions ('ox-html-git-mtime))))

  (org-publish-project "test")
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  '(ox-html-git-mtime
		       :add (lambda () (message "Add ox-html-git-mtime"))
		       :remove (lambda () (message "Remove ox-html-git-mtime")))
#+end_src

#+RESULTS:
| ox-html-git-mtime | :add | (lambda nil (message Add ox-html-git-mtime)) | :remove | (lambda nil (message Remove ox-html-git-mtime)) |


** DONE cleanup

#+begin_src emacs-lisp
  ; --- ox-extensions

  (setq ox-extensions-alist '())

  (defun ox-extend--apply (extension add_or_remove)
    (apply (plist-get (cdr (assoc extension ox-extensions-alist))
		      add_or_remove)
	   ()))

  (defun ox-extend--advise-org-publish-file (orig-fun &rest args)
    (let ((extensions (org-publish-property :extensions (nth 1 args))))
      (dolist (extension extensions)
	(ox-extend--apply extension :add))
      (apply orig-fun args)
      (dolist (extension extensions)
	(ox-extend--apply extension :remove))))

  (advice-add 'org-publish-file :around #'ox-extend--advise-org-publish-file)

  ; --- ox-html-git-mtime

  (add-to-list 'ox-extensions-alist '('ox-html-git-mtime
				      :add (lambda () (message "Add ox-html-git-mtime"))
				      :remove (lambda () (message "Remove ox-html-git-mtime"))))

  ; --- project

  (setq org-publish-project-alist '(("test"
				     :base-directory "/tmp/ox-extend"
				     :publishing-function org-html-publish-to-html
				     :publishing-directory "/tmp/ox-extend/dist"
				     :extensions ('ox-html-git-mtime))))

  (org-publish-project "test")
#+end_src

#+RESULTS:
